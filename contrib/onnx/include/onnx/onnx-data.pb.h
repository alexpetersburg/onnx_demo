// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_2ddata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_2ddata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "onnx/onnx-ml.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_onnx_2fonnx_2ddata_2eproto ONNX_API

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct ONNX_API TableStruct_onnx_2fonnx_2ddata_2eproto {
  static const ::uint32_t offsets[];
};
ONNX_API extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_onnx_2fonnx_2ddata_2eproto;
namespace onnx {
class MapProto;
struct MapProtoDefaultTypeInternal;
ONNX_API extern MapProtoDefaultTypeInternal _MapProto_default_instance_;
class OptionalProto;
struct OptionalProtoDefaultTypeInternal;
ONNX_API extern OptionalProtoDefaultTypeInternal _OptionalProto_default_instance_;
class SequenceProto;
struct SequenceProtoDefaultTypeInternal;
ONNX_API extern SequenceProtoDefaultTypeInternal _SequenceProto_default_instance_;
}  // namespace onnx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace onnx {
enum SequenceProto_DataType : int {
  SequenceProto_DataType_UNDEFINED = 0,
  SequenceProto_DataType_TENSOR = 1,
  SequenceProto_DataType_SPARSE_TENSOR = 2,
  SequenceProto_DataType_SEQUENCE = 3,
  SequenceProto_DataType_MAP = 4,
  SequenceProto_DataType_OPTIONAL = 5,
};

ONNX_API bool SequenceProto_DataType_IsValid(int value);
ONNX_API extern const uint32_t SequenceProto_DataType_internal_data_[];
constexpr SequenceProto_DataType SequenceProto_DataType_DataType_MIN = static_cast<SequenceProto_DataType>(0);
constexpr SequenceProto_DataType SequenceProto_DataType_DataType_MAX = static_cast<SequenceProto_DataType>(5);
constexpr int SequenceProto_DataType_DataType_ARRAYSIZE = 5 + 1;
ONNX_API const ::google::protobuf::EnumDescriptor*
SequenceProto_DataType_descriptor();
template <typename T>
const std::string& SequenceProto_DataType_Name(T value) {
  static_assert(std::is_same<T, SequenceProto_DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return SequenceProto_DataType_Name(static_cast<SequenceProto_DataType>(value));
}
template <>
inline const std::string& SequenceProto_DataType_Name(SequenceProto_DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SequenceProto_DataType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool SequenceProto_DataType_Parse(absl::string_view name, SequenceProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SequenceProto_DataType>(
      SequenceProto_DataType_descriptor(), name, value);
}
enum OptionalProto_DataType : int {
  OptionalProto_DataType_UNDEFINED = 0,
  OptionalProto_DataType_TENSOR = 1,
  OptionalProto_DataType_SPARSE_TENSOR = 2,
  OptionalProto_DataType_SEQUENCE = 3,
  OptionalProto_DataType_MAP = 4,
  OptionalProto_DataType_OPTIONAL = 5,
};

ONNX_API bool OptionalProto_DataType_IsValid(int value);
ONNX_API extern const uint32_t OptionalProto_DataType_internal_data_[];
constexpr OptionalProto_DataType OptionalProto_DataType_DataType_MIN = static_cast<OptionalProto_DataType>(0);
constexpr OptionalProto_DataType OptionalProto_DataType_DataType_MAX = static_cast<OptionalProto_DataType>(5);
constexpr int OptionalProto_DataType_DataType_ARRAYSIZE = 5 + 1;
ONNX_API const ::google::protobuf::EnumDescriptor*
OptionalProto_DataType_descriptor();
template <typename T>
const std::string& OptionalProto_DataType_Name(T value) {
  static_assert(std::is_same<T, OptionalProto_DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return OptionalProto_DataType_Name(static_cast<OptionalProto_DataType>(value));
}
template <>
inline const std::string& OptionalProto_DataType_Name(OptionalProto_DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OptionalProto_DataType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool OptionalProto_DataType_Parse(absl::string_view name, OptionalProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionalProto_DataType>(
      OptionalProto_DataType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ONNX_API MapProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.MapProto) */ {
 public:
  inline MapProto() : MapProto(nullptr) {}
  ~MapProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MapProto(::google::protobuf::internal::ConstantInitialized);

  inline MapProto(const MapProto& from)
      : MapProto(nullptr, from) {}
  MapProto(MapProto&& from) noexcept
    : MapProto() {
    *this = ::std::move(from);
  }

  inline MapProto& operator=(const MapProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapProto& operator=(MapProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapProto* internal_default_instance() {
    return reinterpret_cast<const MapProto*>(
               &_MapProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapProto& a, MapProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MapProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MapProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MapProto& from) {
    MapProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MapProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "onnx.MapProto";
  }
  protected:
  explicit MapProto(::google::protobuf::Arena* arena);
  MapProto(::google::protobuf::Arena* arena, const MapProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kStringKeysFieldNumber = 4,
    kNameFieldNumber = 1,
    kValuesFieldNumber = 5,
    kKeyTypeFieldNumber = 2,
  };
  // repeated int64 keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  ::int64_t keys(int index) const;
  void set_keys(int index, ::int64_t value);
  void add_keys(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& keys() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_keys() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_keys();

  public:
  // repeated bytes string_keys = 4;
  int string_keys_size() const;
  private:
  int _internal_string_keys_size() const;

  public:
  void clear_string_keys() ;
  const std::string& string_keys(int index) const;
  std::string* mutable_string_keys(int index);
  void set_string_keys(int index, const std::string& value);
  void set_string_keys(int index, std::string&& value);
  void set_string_keys(int index, const char* value);
  void set_string_keys(int index, const void* value, std::size_t size);
  void set_string_keys(int index, absl::string_view value);
  std::string* add_string_keys();
  void add_string_keys(const std::string& value);
  void add_string_keys(std::string&& value);
  void add_string_keys(const char* value);
  void add_string_keys(const void* value, std::size_t size);
  void add_string_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& string_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_string_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_string_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_string_keys();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .onnx.SequenceProto values = 5;
  bool has_values() const;
  void clear_values() ;
  const ::onnx::SequenceProto& values() const;
  PROTOBUF_NODISCARD ::onnx::SequenceProto* release_values();
  ::onnx::SequenceProto* mutable_values();
  void set_allocated_values(::onnx::SequenceProto* value);
  void unsafe_arena_set_allocated_values(::onnx::SequenceProto* value);
  ::onnx::SequenceProto* unsafe_arena_release_values();

  private:
  const ::onnx::SequenceProto& _internal_values() const;
  ::onnx::SequenceProto* _internal_mutable_values();

  public:
  // optional int32 key_type = 2;
  bool has_key_type() const;
  void clear_key_type() ;
  ::int32_t key_type() const;
  void set_key_type(::int32_t value);

  private:
  ::int32_t _internal_key_type() const;
  void _internal_set_key_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:onnx.MapProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      26, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct ONNX_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> keys_;
    ::google::protobuf::RepeatedPtrField<std::string> string_keys_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::onnx::SequenceProto* values_;
    ::int32_t key_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_onnx_2fonnx_2ddata_2eproto;
};// -------------------------------------------------------------------

class ONNX_API OptionalProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.OptionalProto) */ {
 public:
  inline OptionalProto() : OptionalProto(nullptr) {}
  ~OptionalProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionalProto(::google::protobuf::internal::ConstantInitialized);

  inline OptionalProto(const OptionalProto& from)
      : OptionalProto(nullptr, from) {}
  OptionalProto(OptionalProto&& from) noexcept
    : OptionalProto() {
    *this = ::std::move(from);
  }

  inline OptionalProto& operator=(const OptionalProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalProto& operator=(OptionalProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionalProto* internal_default_instance() {
    return reinterpret_cast<const OptionalProto*>(
               &_OptionalProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OptionalProto& a, OptionalProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OptionalProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OptionalProto& from) {
    OptionalProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionalProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "onnx.OptionalProto";
  }
  protected:
  explicit OptionalProto(::google::protobuf::Arena* arena);
  OptionalProto(::google::protobuf::Arena* arena, const OptionalProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DataType = OptionalProto_DataType;
  static constexpr DataType UNDEFINED = OptionalProto_DataType_UNDEFINED;
  static constexpr DataType TENSOR = OptionalProto_DataType_TENSOR;
  static constexpr DataType SPARSE_TENSOR = OptionalProto_DataType_SPARSE_TENSOR;
  static constexpr DataType SEQUENCE = OptionalProto_DataType_SEQUENCE;
  static constexpr DataType MAP = OptionalProto_DataType_MAP;
  static constexpr DataType OPTIONAL = OptionalProto_DataType_OPTIONAL;
  static inline bool DataType_IsValid(int value) {
    return OptionalProto_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN = OptionalProto_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX = OptionalProto_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE = OptionalProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
    return OptionalProto_DataType_descriptor();
  }
  template <typename T>
  static inline const std::string& DataType_Name(T value) {
    return OptionalProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(absl::string_view name, DataType* value) {
    return OptionalProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTensorValueFieldNumber = 3,
    kSparseTensorValueFieldNumber = 4,
    kSequenceValueFieldNumber = 5,
    kMapValueFieldNumber = 6,
    kOptionalValueFieldNumber = 7,
    kElemTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .onnx.TensorProto tensor_value = 3;
  bool has_tensor_value() const;
  void clear_tensor_value() ;
  const ::onnx::TensorProto& tensor_value() const;
  PROTOBUF_NODISCARD ::onnx::TensorProto* release_tensor_value();
  ::onnx::TensorProto* mutable_tensor_value();
  void set_allocated_tensor_value(::onnx::TensorProto* value);
  void unsafe_arena_set_allocated_tensor_value(::onnx::TensorProto* value);
  ::onnx::TensorProto* unsafe_arena_release_tensor_value();

  private:
  const ::onnx::TensorProto& _internal_tensor_value() const;
  ::onnx::TensorProto* _internal_mutable_tensor_value();

  public:
  // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
  bool has_sparse_tensor_value() const;
  void clear_sparse_tensor_value() ;
  const ::onnx::SparseTensorProto& sparse_tensor_value() const;
  PROTOBUF_NODISCARD ::onnx::SparseTensorProto* release_sparse_tensor_value();
  ::onnx::SparseTensorProto* mutable_sparse_tensor_value();
  void set_allocated_sparse_tensor_value(::onnx::SparseTensorProto* value);
  void unsafe_arena_set_allocated_sparse_tensor_value(::onnx::SparseTensorProto* value);
  ::onnx::SparseTensorProto* unsafe_arena_release_sparse_tensor_value();

  private:
  const ::onnx::SparseTensorProto& _internal_sparse_tensor_value() const;
  ::onnx::SparseTensorProto* _internal_mutable_sparse_tensor_value();

  public:
  // optional .onnx.SequenceProto sequence_value = 5;
  bool has_sequence_value() const;
  void clear_sequence_value() ;
  const ::onnx::SequenceProto& sequence_value() const;
  PROTOBUF_NODISCARD ::onnx::SequenceProto* release_sequence_value();
  ::onnx::SequenceProto* mutable_sequence_value();
  void set_allocated_sequence_value(::onnx::SequenceProto* value);
  void unsafe_arena_set_allocated_sequence_value(::onnx::SequenceProto* value);
  ::onnx::SequenceProto* unsafe_arena_release_sequence_value();

  private:
  const ::onnx::SequenceProto& _internal_sequence_value() const;
  ::onnx::SequenceProto* _internal_mutable_sequence_value();

  public:
  // optional .onnx.MapProto map_value = 6;
  bool has_map_value() const;
  void clear_map_value() ;
  const ::onnx::MapProto& map_value() const;
  PROTOBUF_NODISCARD ::onnx::MapProto* release_map_value();
  ::onnx::MapProto* mutable_map_value();
  void set_allocated_map_value(::onnx::MapProto* value);
  void unsafe_arena_set_allocated_map_value(::onnx::MapProto* value);
  ::onnx::MapProto* unsafe_arena_release_map_value();

  private:
  const ::onnx::MapProto& _internal_map_value() const;
  ::onnx::MapProto* _internal_mutable_map_value();

  public:
  // optional .onnx.OptionalProto optional_value = 7;
  bool has_optional_value() const;
  void clear_optional_value() ;
  const ::onnx::OptionalProto& optional_value() const;
  PROTOBUF_NODISCARD ::onnx::OptionalProto* release_optional_value();
  ::onnx::OptionalProto* mutable_optional_value();
  void set_allocated_optional_value(::onnx::OptionalProto* value);
  void unsafe_arena_set_allocated_optional_value(::onnx::OptionalProto* value);
  ::onnx::OptionalProto* unsafe_arena_release_optional_value();

  private:
  const ::onnx::OptionalProto& _internal_optional_value() const;
  ::onnx::OptionalProto* _internal_mutable_optional_value();

  public:
  // optional int32 elem_type = 2;
  bool has_elem_type() const;
  void clear_elem_type() ;
  ::int32_t elem_type() const;
  void set_elem_type(::int32_t value);

  private:
  ::int32_t _internal_elem_type() const;
  void _internal_set_elem_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:onnx.OptionalProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct ONNX_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::onnx::TensorProto* tensor_value_;
    ::onnx::SparseTensorProto* sparse_tensor_value_;
    ::onnx::SequenceProto* sequence_value_;
    ::onnx::MapProto* map_value_;
    ::onnx::OptionalProto* optional_value_;
    ::int32_t elem_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_onnx_2fonnx_2ddata_2eproto;
};// -------------------------------------------------------------------

class ONNX_API SequenceProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.SequenceProto) */ {
 public:
  inline SequenceProto() : SequenceProto(nullptr) {}
  ~SequenceProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SequenceProto(::google::protobuf::internal::ConstantInitialized);

  inline SequenceProto(const SequenceProto& from)
      : SequenceProto(nullptr, from) {}
  SequenceProto(SequenceProto&& from) noexcept
    : SequenceProto() {
    *this = ::std::move(from);
  }

  inline SequenceProto& operator=(const SequenceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequenceProto& operator=(SequenceProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SequenceProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SequenceProto* internal_default_instance() {
    return reinterpret_cast<const SequenceProto*>(
               &_SequenceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SequenceProto& a, SequenceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SequenceProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SequenceProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SequenceProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SequenceProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SequenceProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SequenceProto& from) {
    SequenceProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SequenceProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "onnx.SequenceProto";
  }
  protected:
  explicit SequenceProto(::google::protobuf::Arena* arena);
  SequenceProto(::google::protobuf::Arena* arena, const SequenceProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DataType = SequenceProto_DataType;
  static constexpr DataType UNDEFINED = SequenceProto_DataType_UNDEFINED;
  static constexpr DataType TENSOR = SequenceProto_DataType_TENSOR;
  static constexpr DataType SPARSE_TENSOR = SequenceProto_DataType_SPARSE_TENSOR;
  static constexpr DataType SEQUENCE = SequenceProto_DataType_SEQUENCE;
  static constexpr DataType MAP = SequenceProto_DataType_MAP;
  static constexpr DataType OPTIONAL = SequenceProto_DataType_OPTIONAL;
  static inline bool DataType_IsValid(int value) {
    return SequenceProto_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN = SequenceProto_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX = SequenceProto_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE = SequenceProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
    return SequenceProto_DataType_descriptor();
  }
  template <typename T>
  static inline const std::string& DataType_Name(T value) {
    return SequenceProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(absl::string_view name, DataType* value) {
    return SequenceProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTensorValuesFieldNumber = 3,
    kSparseTensorValuesFieldNumber = 4,
    kSequenceValuesFieldNumber = 5,
    kMapValuesFieldNumber = 6,
    kOptionalValuesFieldNumber = 7,
    kNameFieldNumber = 1,
    kElemTypeFieldNumber = 2,
  };
  // repeated .onnx.TensorProto tensor_values = 3;
  int tensor_values_size() const;
  private:
  int _internal_tensor_values_size() const;

  public:
  void clear_tensor_values() ;
  ::onnx::TensorProto* mutable_tensor_values(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_tensor_values();
  private:
  const ::google::protobuf::RepeatedPtrField<::onnx::TensorProto>& _internal_tensor_values() const;
  ::google::protobuf::RepeatedPtrField<::onnx::TensorProto>* _internal_mutable_tensor_values();
  public:
  const ::onnx::TensorProto& tensor_values(int index) const;
  ::onnx::TensorProto* add_tensor_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      tensor_values() const;
  // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
  int sparse_tensor_values_size() const;
  private:
  int _internal_sparse_tensor_values_size() const;

  public:
  void clear_sparse_tensor_values() ;
  ::onnx::SparseTensorProto* mutable_sparse_tensor_values(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
      mutable_sparse_tensor_values();
  private:
  const ::google::protobuf::RepeatedPtrField<::onnx::SparseTensorProto>& _internal_sparse_tensor_values() const;
  ::google::protobuf::RepeatedPtrField<::onnx::SparseTensorProto>* _internal_mutable_sparse_tensor_values();
  public:
  const ::onnx::SparseTensorProto& sparse_tensor_values(int index) const;
  ::onnx::SparseTensorProto* add_sparse_tensor_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
      sparse_tensor_values() const;
  // repeated .onnx.SequenceProto sequence_values = 5;
  int sequence_values_size() const;
  private:
  int _internal_sequence_values_size() const;

  public:
  void clear_sequence_values() ;
  ::onnx::SequenceProto* mutable_sequence_values(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >*
      mutable_sequence_values();
  private:
  const ::google::protobuf::RepeatedPtrField<::onnx::SequenceProto>& _internal_sequence_values() const;
  ::google::protobuf::RepeatedPtrField<::onnx::SequenceProto>* _internal_mutable_sequence_values();
  public:
  const ::onnx::SequenceProto& sequence_values(int index) const;
  ::onnx::SequenceProto* add_sequence_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto >&
      sequence_values() const;
  // repeated .onnx.MapProto map_values = 6;
  int map_values_size() const;
  private:
  int _internal_map_values_size() const;

  public:
  void clear_map_values() ;
  ::onnx::MapProto* mutable_map_values(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::MapProto >*
      mutable_map_values();
  private:
  const ::google::protobuf::RepeatedPtrField<::onnx::MapProto>& _internal_map_values() const;
  ::google::protobuf::RepeatedPtrField<::onnx::MapProto>* _internal_mutable_map_values();
  public:
  const ::onnx::MapProto& map_values(int index) const;
  ::onnx::MapProto* add_map_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::MapProto >&
      map_values() const;
  // repeated .onnx.OptionalProto optional_values = 7;
  int optional_values_size() const;
  private:
  int _internal_optional_values_size() const;

  public:
  void clear_optional_values() ;
  ::onnx::OptionalProto* mutable_optional_values(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >*
      mutable_optional_values();
  private:
  const ::google::protobuf::RepeatedPtrField<::onnx::OptionalProto>& _internal_optional_values() const;
  ::google::protobuf::RepeatedPtrField<::onnx::OptionalProto>* _internal_mutable_optional_values();
  public:
  const ::onnx::OptionalProto& optional_values(int index) const;
  ::onnx::OptionalProto* add_optional_values();
  const ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto >&
      optional_values() const;
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 elem_type = 2;
  bool has_elem_type() const;
  void clear_elem_type() ;
  ::int32_t elem_type() const;
  void set_elem_type(::int32_t value);

  private:
  ::int32_t _internal_elem_type() const;
  void _internal_set_elem_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:onnx.SequenceProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct ONNX_API Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > tensor_values_;
    ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto > sparse_tensor_values_;
    ::google::protobuf::RepeatedPtrField< ::onnx::SequenceProto > sequence_values_;
    ::google::protobuf::RepeatedPtrField< ::onnx::MapProto > map_values_;
    ::google::protobuf::RepeatedPtrField< ::onnx::OptionalProto > optional_values_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t elem_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_onnx_2fonnx_2ddata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SequenceProto

// optional string name = 1;
inline bool SequenceProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SequenceProto::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SequenceProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SequenceProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:onnx.SequenceProto.name)
}
inline std::string* SequenceProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.name)
  return _s;
}
inline const std::string& SequenceProto::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SequenceProto::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SequenceProto::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SequenceProto::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.SequenceProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SequenceProto::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onnx.SequenceProto.name)
}

// optional int32 elem_type = 2;
inline bool SequenceProto::has_elem_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SequenceProto::clear_elem_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.elem_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SequenceProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.elem_type)
  return _internal_elem_type();
}
inline void SequenceProto::set_elem_type(::int32_t value) {
  _internal_set_elem_type(value);
  // @@protoc_insertion_point(field_set:onnx.SequenceProto.elem_type)
}
inline ::int32_t SequenceProto::_internal_elem_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.elem_type_;
}
inline void SequenceProto::_internal_set_elem_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.elem_type_ = value;
}

// repeated .onnx.TensorProto tensor_values = 3;
inline int SequenceProto::_internal_tensor_values_size() const {
  return _internal_tensor_values().size();
}
inline int SequenceProto::tensor_values_size() const {
  return _internal_tensor_values_size();
}
inline ::onnx::TensorProto* SequenceProto::mutable_tensor_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.tensor_values)
  return _internal_mutable_tensor_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::onnx::TensorProto>* SequenceProto::mutable_tensor_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.tensor_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tensor_values();
}
inline const ::onnx::TensorProto& SequenceProto::tensor_values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.tensor_values)
  return _internal_tensor_values().Get(index);
}
inline ::onnx::TensorProto* SequenceProto::add_tensor_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::onnx::TensorProto* _add = _internal_mutable_tensor_values()->Add();
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.tensor_values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::TensorProto>& SequenceProto::tensor_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.tensor_values)
  return _internal_tensor_values();
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::TensorProto>&
SequenceProto::_internal_tensor_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tensor_values_;
}
inline ::google::protobuf::RepeatedPtrField<::onnx::TensorProto>*
SequenceProto::_internal_mutable_tensor_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tensor_values_;
}

// repeated .onnx.SparseTensorProto sparse_tensor_values = 4;
inline int SequenceProto::_internal_sparse_tensor_values_size() const {
  return _internal_sparse_tensor_values().size();
}
inline int SequenceProto::sparse_tensor_values_size() const {
  return _internal_sparse_tensor_values_size();
}
inline ::onnx::SparseTensorProto* SequenceProto::mutable_sparse_tensor_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.sparse_tensor_values)
  return _internal_mutable_sparse_tensor_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::onnx::SparseTensorProto>* SequenceProto::mutable_sparse_tensor_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.sparse_tensor_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sparse_tensor_values();
}
inline const ::onnx::SparseTensorProto& SequenceProto::sparse_tensor_values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.sparse_tensor_values)
  return _internal_sparse_tensor_values().Get(index);
}
inline ::onnx::SparseTensorProto* SequenceProto::add_sparse_tensor_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::onnx::SparseTensorProto* _add = _internal_mutable_sparse_tensor_values()->Add();
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.sparse_tensor_values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::SparseTensorProto>& SequenceProto::sparse_tensor_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.sparse_tensor_values)
  return _internal_sparse_tensor_values();
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::SparseTensorProto>&
SequenceProto::_internal_sparse_tensor_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sparse_tensor_values_;
}
inline ::google::protobuf::RepeatedPtrField<::onnx::SparseTensorProto>*
SequenceProto::_internal_mutable_sparse_tensor_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sparse_tensor_values_;
}

// repeated .onnx.SequenceProto sequence_values = 5;
inline int SequenceProto::_internal_sequence_values_size() const {
  return _internal_sequence_values().size();
}
inline int SequenceProto::sequence_values_size() const {
  return _internal_sequence_values_size();
}
inline void SequenceProto::clear_sequence_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_values_.Clear();
}
inline ::onnx::SequenceProto* SequenceProto::mutable_sequence_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.sequence_values)
  return _internal_mutable_sequence_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::onnx::SequenceProto>* SequenceProto::mutable_sequence_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.sequence_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sequence_values();
}
inline const ::onnx::SequenceProto& SequenceProto::sequence_values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.sequence_values)
  return _internal_sequence_values().Get(index);
}
inline ::onnx::SequenceProto* SequenceProto::add_sequence_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::onnx::SequenceProto* _add = _internal_mutable_sequence_values()->Add();
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.sequence_values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::SequenceProto>& SequenceProto::sequence_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.sequence_values)
  return _internal_sequence_values();
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::SequenceProto>&
SequenceProto::_internal_sequence_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_values_;
}
inline ::google::protobuf::RepeatedPtrField<::onnx::SequenceProto>*
SequenceProto::_internal_mutable_sequence_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sequence_values_;
}

// repeated .onnx.MapProto map_values = 6;
inline int SequenceProto::_internal_map_values_size() const {
  return _internal_map_values().size();
}
inline int SequenceProto::map_values_size() const {
  return _internal_map_values_size();
}
inline void SequenceProto::clear_map_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.map_values_.Clear();
}
inline ::onnx::MapProto* SequenceProto::mutable_map_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.map_values)
  return _internal_mutable_map_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::onnx::MapProto>* SequenceProto::mutable_map_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.map_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_map_values();
}
inline const ::onnx::MapProto& SequenceProto::map_values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.map_values)
  return _internal_map_values().Get(index);
}
inline ::onnx::MapProto* SequenceProto::add_map_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::onnx::MapProto* _add = _internal_mutable_map_values()->Add();
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.map_values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::MapProto>& SequenceProto::map_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.map_values)
  return _internal_map_values();
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::MapProto>&
SequenceProto::_internal_map_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.map_values_;
}
inline ::google::protobuf::RepeatedPtrField<::onnx::MapProto>*
SequenceProto::_internal_mutable_map_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.map_values_;
}

// repeated .onnx.OptionalProto optional_values = 7;
inline int SequenceProto::_internal_optional_values_size() const {
  return _internal_optional_values().size();
}
inline int SequenceProto::optional_values_size() const {
  return _internal_optional_values_size();
}
inline void SequenceProto::clear_optional_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.optional_values_.Clear();
}
inline ::onnx::OptionalProto* SequenceProto::mutable_optional_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:onnx.SequenceProto.optional_values)
  return _internal_mutable_optional_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::onnx::OptionalProto>* SequenceProto::mutable_optional_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:onnx.SequenceProto.optional_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_optional_values();
}
inline const ::onnx::OptionalProto& SequenceProto::optional_values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.SequenceProto.optional_values)
  return _internal_optional_values().Get(index);
}
inline ::onnx::OptionalProto* SequenceProto::add_optional_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::onnx::OptionalProto* _add = _internal_mutable_optional_values()->Add();
  // @@protoc_insertion_point(field_add:onnx.SequenceProto.optional_values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::OptionalProto>& SequenceProto::optional_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:onnx.SequenceProto.optional_values)
  return _internal_optional_values();
}
inline const ::google::protobuf::RepeatedPtrField<::onnx::OptionalProto>&
SequenceProto::_internal_optional_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.optional_values_;
}
inline ::google::protobuf::RepeatedPtrField<::onnx::OptionalProto>*
SequenceProto::_internal_mutable_optional_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.optional_values_;
}

// -------------------------------------------------------------------

// MapProto

// optional string name = 1;
inline bool MapProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MapProto::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MapProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.MapProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MapProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:onnx.MapProto.name)
}
inline std::string* MapProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.name)
  return _s;
}
inline const std::string& MapProto::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void MapProto::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* MapProto::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* MapProto::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.MapProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MapProto::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onnx.MapProto.name)
}

// optional int32 key_type = 2;
inline bool MapProto::has_key_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MapProto::clear_key_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t MapProto::key_type() const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.key_type)
  return _internal_key_type();
}
inline void MapProto::set_key_type(::int32_t value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:onnx.MapProto.key_type)
}
inline ::int32_t MapProto::_internal_key_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_type_;
}
inline void MapProto::_internal_set_key_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.key_type_ = value;
}

// repeated int64 keys = 3;
inline int MapProto::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int MapProto::keys_size() const {
  return _internal_keys_size();
}
inline void MapProto::clear_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keys_.Clear();
}
inline ::int64_t MapProto::keys(int index) const {
  // @@protoc_insertion_point(field_get:onnx.MapProto.keys)
  return _internal_keys().Get(index);
}
inline void MapProto::set_keys(int index, ::int64_t value) {
  _internal_mutable_keys()->Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.MapProto.keys)
}
inline void MapProto::add_keys(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_keys()->Add(value);
  // @@protoc_insertion_point(field_add:onnx.MapProto.keys)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& MapProto::keys() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:onnx.MapProto.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedField<::int64_t>* MapProto::mutable_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:onnx.MapProto.keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& MapProto::_internal_keys()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* MapProto::_internal_mutable_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.keys_;
}

// repeated bytes string_keys = 4;
inline int MapProto::_internal_string_keys_size() const {
  return _internal_string_keys().size();
}
inline int MapProto::string_keys_size() const {
  return _internal_string_keys_size();
}
inline void MapProto::clear_string_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.string_keys_.Clear();
}
inline std::string* MapProto::add_string_keys()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_string_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:onnx.MapProto.string_keys)
  return _s;
}
inline const std::string& MapProto::string_keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.MapProto.string_keys)
  return _internal_string_keys().Get(index);
}
inline std::string* MapProto::mutable_string_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.string_keys)
  return _internal_mutable_string_keys()->Mutable(index);
}
inline void MapProto::set_string_keys(int index, const std::string& value) {
  _internal_mutable_string_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onnx.MapProto.string_keys)
}
inline void MapProto::set_string_keys(int index, std::string&& value) {
  _internal_mutable_string_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onnx.MapProto.string_keys)
}
inline void MapProto::set_string_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_string_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.MapProto.string_keys)
}
inline void MapProto::set_string_keys(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_string_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.MapProto.string_keys)
}
inline void MapProto::set_string_keys(int index, absl::string_view value) {
  _internal_mutable_string_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:onnx.MapProto.string_keys)
}
inline void MapProto::add_string_keys(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.MapProto.string_keys)
}
inline void MapProto::add_string_keys(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.MapProto.string_keys)
}
inline void MapProto::add_string_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.MapProto.string_keys)
}
inline void MapProto::add_string_keys(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.MapProto.string_keys)
}
inline void MapProto::add_string_keys(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:onnx.MapProto.string_keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MapProto::string_keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:onnx.MapProto.string_keys)
  return _internal_string_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MapProto::mutable_string_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:onnx.MapProto.string_keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_string_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MapProto::_internal_string_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.string_keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MapProto::_internal_mutable_string_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.string_keys_;
}

// optional .onnx.SequenceProto values = 5;
inline bool MapProto::has_values() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.values_ != nullptr);
  return value;
}
inline void MapProto::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.values_ != nullptr) _impl_.values_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::onnx::SequenceProto& MapProto::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::onnx::SequenceProto* p = _impl_.values_;
  return p != nullptr ? *p : reinterpret_cast<const ::onnx::SequenceProto&>(::onnx::_SequenceProto_default_instance_);
}
inline const ::onnx::SequenceProto& MapProto::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.MapProto.values)
  return _internal_values();
}
inline void MapProto::unsafe_arena_set_allocated_values(::onnx::SequenceProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.values_);
  }
  _impl_.values_ = reinterpret_cast<::onnx::SequenceProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx.MapProto.values)
}
inline ::onnx::SequenceProto* MapProto::release_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::onnx::SequenceProto* released = _impl_.values_;
  _impl_.values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::onnx::SequenceProto* MapProto::unsafe_arena_release_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.MapProto.values)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::onnx::SequenceProto* temp = _impl_.values_;
  _impl_.values_ = nullptr;
  return temp;
}
inline ::onnx::SequenceProto* MapProto::_internal_mutable_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.values_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx::SequenceProto>(GetArena());
    _impl_.values_ = reinterpret_cast<::onnx::SequenceProto*>(p);
  }
  return _impl_.values_;
}
inline ::onnx::SequenceProto* MapProto::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::onnx::SequenceProto* _msg = _internal_mutable_values();
  // @@protoc_insertion_point(field_mutable:onnx.MapProto.values)
  return _msg;
}
inline void MapProto::set_allocated_values(::onnx::SequenceProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::onnx::SequenceProto*>(_impl_.values_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::onnx::SequenceProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.values_ = reinterpret_cast<::onnx::SequenceProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:onnx.MapProto.values)
}

// -------------------------------------------------------------------

// OptionalProto

// optional string name = 1;
inline bool OptionalProto::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OptionalProto::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionalProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionalProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:onnx.OptionalProto.name)
}
inline std::string* OptionalProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.name)
  return _s;
}
inline const std::string& OptionalProto::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void OptionalProto::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* OptionalProto::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* OptionalProto::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OptionalProto::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.name)
}

// optional int32 elem_type = 2;
inline bool OptionalProto::has_elem_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void OptionalProto::clear_elem_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.elem_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t OptionalProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.elem_type)
  return _internal_elem_type();
}
inline void OptionalProto::set_elem_type(::int32_t value) {
  _internal_set_elem_type(value);
  // @@protoc_insertion_point(field_set:onnx.OptionalProto.elem_type)
}
inline ::int32_t OptionalProto::_internal_elem_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.elem_type_;
}
inline void OptionalProto::_internal_set_elem_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.elem_type_ = value;
}

// optional .onnx.TensorProto tensor_value = 3;
inline bool OptionalProto::has_tensor_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tensor_value_ != nullptr);
  return value;
}
inline const ::onnx::TensorProto& OptionalProto::_internal_tensor_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::onnx::TensorProto* p = _impl_.tensor_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::onnx::TensorProto&>(::onnx::_TensorProto_default_instance_);
}
inline const ::onnx::TensorProto& OptionalProto::tensor_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.tensor_value)
  return _internal_tensor_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_tensor_value(::onnx::TensorProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_value_);
  }
  _impl_.tensor_value_ = reinterpret_cast<::onnx::TensorProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx.OptionalProto.tensor_value)
}
inline ::onnx::TensorProto* OptionalProto::release_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::onnx::TensorProto* released = _impl_.tensor_value_;
  _impl_.tensor_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::onnx::TensorProto* OptionalProto::unsafe_arena_release_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.tensor_value)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::onnx::TensorProto* temp = _impl_.tensor_value_;
  _impl_.tensor_value_ = nullptr;
  return temp;
}
inline ::onnx::TensorProto* OptionalProto::_internal_mutable_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tensor_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx::TensorProto>(GetArena());
    _impl_.tensor_value_ = reinterpret_cast<::onnx::TensorProto*>(p);
  }
  return _impl_.tensor_value_;
}
inline ::onnx::TensorProto* OptionalProto::mutable_tensor_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::onnx::TensorProto* _msg = _internal_mutable_tensor_value();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.tensor_value)
  return _msg;
}
inline void OptionalProto::set_allocated_tensor_value(::onnx::TensorProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.tensor_value_ = reinterpret_cast<::onnx::TensorProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.tensor_value)
}

// optional .onnx.SparseTensorProto sparse_tensor_value = 4;
inline bool OptionalProto::has_sparse_tensor_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sparse_tensor_value_ != nullptr);
  return value;
}
inline const ::onnx::SparseTensorProto& OptionalProto::_internal_sparse_tensor_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::onnx::SparseTensorProto* p = _impl_.sparse_tensor_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::onnx::SparseTensorProto&>(::onnx::_SparseTensorProto_default_instance_);
}
inline const ::onnx::SparseTensorProto& OptionalProto::sparse_tensor_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.sparse_tensor_value)
  return _internal_sparse_tensor_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_sparse_tensor_value(::onnx::SparseTensorProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sparse_tensor_value_);
  }
  _impl_.sparse_tensor_value_ = reinterpret_cast<::onnx::SparseTensorProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx.OptionalProto.sparse_tensor_value)
}
inline ::onnx::SparseTensorProto* OptionalProto::release_sparse_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::onnx::SparseTensorProto* released = _impl_.sparse_tensor_value_;
  _impl_.sparse_tensor_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::onnx::SparseTensorProto* OptionalProto::unsafe_arena_release_sparse_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.sparse_tensor_value)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::onnx::SparseTensorProto* temp = _impl_.sparse_tensor_value_;
  _impl_.sparse_tensor_value_ = nullptr;
  return temp;
}
inline ::onnx::SparseTensorProto* OptionalProto::_internal_mutable_sparse_tensor_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sparse_tensor_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx::SparseTensorProto>(GetArena());
    _impl_.sparse_tensor_value_ = reinterpret_cast<::onnx::SparseTensorProto*>(p);
  }
  return _impl_.sparse_tensor_value_;
}
inline ::onnx::SparseTensorProto* OptionalProto::mutable_sparse_tensor_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::onnx::SparseTensorProto* _msg = _internal_mutable_sparse_tensor_value();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.sparse_tensor_value)
  return _msg;
}
inline void OptionalProto::set_allocated_sparse_tensor_value(::onnx::SparseTensorProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sparse_tensor_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.sparse_tensor_value_ = reinterpret_cast<::onnx::SparseTensorProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.sparse_tensor_value)
}

// optional .onnx.SequenceProto sequence_value = 5;
inline bool OptionalProto::has_sequence_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sequence_value_ != nullptr);
  return value;
}
inline void OptionalProto::clear_sequence_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sequence_value_ != nullptr) _impl_.sequence_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::onnx::SequenceProto& OptionalProto::_internal_sequence_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::onnx::SequenceProto* p = _impl_.sequence_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::onnx::SequenceProto&>(::onnx::_SequenceProto_default_instance_);
}
inline const ::onnx::SequenceProto& OptionalProto::sequence_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.sequence_value)
  return _internal_sequence_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_sequence_value(::onnx::SequenceProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sequence_value_);
  }
  _impl_.sequence_value_ = reinterpret_cast<::onnx::SequenceProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx.OptionalProto.sequence_value)
}
inline ::onnx::SequenceProto* OptionalProto::release_sequence_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::onnx::SequenceProto* released = _impl_.sequence_value_;
  _impl_.sequence_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::onnx::SequenceProto* OptionalProto::unsafe_arena_release_sequence_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.sequence_value)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::onnx::SequenceProto* temp = _impl_.sequence_value_;
  _impl_.sequence_value_ = nullptr;
  return temp;
}
inline ::onnx::SequenceProto* OptionalProto::_internal_mutable_sequence_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sequence_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx::SequenceProto>(GetArena());
    _impl_.sequence_value_ = reinterpret_cast<::onnx::SequenceProto*>(p);
  }
  return _impl_.sequence_value_;
}
inline ::onnx::SequenceProto* OptionalProto::mutable_sequence_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::onnx::SequenceProto* _msg = _internal_mutable_sequence_value();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.sequence_value)
  return _msg;
}
inline void OptionalProto::set_allocated_sequence_value(::onnx::SequenceProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::onnx::SequenceProto*>(_impl_.sequence_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::onnx::SequenceProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.sequence_value_ = reinterpret_cast<::onnx::SequenceProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.sequence_value)
}

// optional .onnx.MapProto map_value = 6;
inline bool OptionalProto::has_map_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.map_value_ != nullptr);
  return value;
}
inline void OptionalProto::clear_map_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.map_value_ != nullptr) _impl_.map_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::onnx::MapProto& OptionalProto::_internal_map_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::onnx::MapProto* p = _impl_.map_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::onnx::MapProto&>(::onnx::_MapProto_default_instance_);
}
inline const ::onnx::MapProto& OptionalProto::map_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.map_value)
  return _internal_map_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_map_value(::onnx::MapProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.map_value_);
  }
  _impl_.map_value_ = reinterpret_cast<::onnx::MapProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx.OptionalProto.map_value)
}
inline ::onnx::MapProto* OptionalProto::release_map_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::onnx::MapProto* released = _impl_.map_value_;
  _impl_.map_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::onnx::MapProto* OptionalProto::unsafe_arena_release_map_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.map_value)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::onnx::MapProto* temp = _impl_.map_value_;
  _impl_.map_value_ = nullptr;
  return temp;
}
inline ::onnx::MapProto* OptionalProto::_internal_mutable_map_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.map_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx::MapProto>(GetArena());
    _impl_.map_value_ = reinterpret_cast<::onnx::MapProto*>(p);
  }
  return _impl_.map_value_;
}
inline ::onnx::MapProto* OptionalProto::mutable_map_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::onnx::MapProto* _msg = _internal_mutable_map_value();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.map_value)
  return _msg;
}
inline void OptionalProto::set_allocated_map_value(::onnx::MapProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::onnx::MapProto*>(_impl_.map_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::onnx::MapProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.map_value_ = reinterpret_cast<::onnx::MapProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.map_value)
}

// optional .onnx.OptionalProto optional_value = 7;
inline bool OptionalProto::has_optional_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optional_value_ != nullptr);
  return value;
}
inline void OptionalProto::clear_optional_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.optional_value_ != nullptr) _impl_.optional_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::onnx::OptionalProto& OptionalProto::_internal_optional_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::onnx::OptionalProto* p = _impl_.optional_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::onnx::OptionalProto&>(::onnx::_OptionalProto_default_instance_);
}
inline const ::onnx::OptionalProto& OptionalProto::optional_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:onnx.OptionalProto.optional_value)
  return _internal_optional_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_optional_value(::onnx::OptionalProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.optional_value_);
  }
  _impl_.optional_value_ = reinterpret_cast<::onnx::OptionalProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx.OptionalProto.optional_value)
}
inline ::onnx::OptionalProto* OptionalProto::release_optional_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::onnx::OptionalProto* released = _impl_.optional_value_;
  _impl_.optional_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::onnx::OptionalProto* OptionalProto::unsafe_arena_release_optional_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:onnx.OptionalProto.optional_value)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::onnx::OptionalProto* temp = _impl_.optional_value_;
  _impl_.optional_value_ = nullptr;
  return temp;
}
inline ::onnx::OptionalProto* OptionalProto::_internal_mutable_optional_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.optional_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx::OptionalProto>(GetArena());
    _impl_.optional_value_ = reinterpret_cast<::onnx::OptionalProto*>(p);
  }
  return _impl_.optional_value_;
}
inline ::onnx::OptionalProto* OptionalProto::mutable_optional_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::onnx::OptionalProto* _msg = _internal_mutable_optional_value();
  // @@protoc_insertion_point(field_mutable:onnx.OptionalProto.optional_value)
  return _msg;
}
inline void OptionalProto::set_allocated_optional_value(::onnx::OptionalProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::onnx::OptionalProto*>(_impl_.optional_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::onnx::OptionalProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.optional_value_ = reinterpret_cast<::onnx::OptionalProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:onnx.OptionalProto.optional_value)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::onnx::SequenceProto_DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::onnx::SequenceProto_DataType>() {
  return ::onnx::SequenceProto_DataType_descriptor();
}
template <>
struct is_proto_enum<::onnx::OptionalProto_DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::onnx::OptionalProto_DataType>() {
  return ::onnx::OptionalProto_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_2ddata_2eproto_2epb_2eh
